\functions {
   int keccak256(int);
   int sha3(int);
   int MAXUINT256;
}


\rules {

  uint256Range {
      \schemaVar \term Heap h;
      \schemaVar \term blockchain.types.Uint256 ui;
      
      \find ( int::select(h, ui, blockchain.types.Uint256::$_value) )
	  \sameUpdateLevel
	  \add(boolean::select(h, ui, java.lang.Object::<created>) = TRUE -> (int::select(h, ui, blockchain.types.Uint256::$_value) >= 0 & int::select(h, ui, blockchain.types.Uint256::$_value) <= MAXUINT256) ==>)
      \heuristics (partialInvAxiom)
  };

  dismissUnrelatedStateChange {
      \schemaVar \term Heap h;
      \schemaVar \term any v;      
      \schemaVar \term blockchain.types.Uint256 arg1, arg2;
      \schemaVar \term java.lang.Object o;
      \schemaVar \term Field f;
      
      \find ( blockchain.types.Uint256::eq(store(h, o, f, v), arg1, arg2) )
	  \replacewith( \if (o != arg1 & o != arg2) \then (blockchain.types.Uint256::eq(h, arg1, arg2)) \else (blockchain.types.Uint256::eq(store(h, o, f, v), arg1, arg2)) )
      \heuristics (userTaclets1)
  };
  
   dismissUnrelatedStateChangeSum {
      \schemaVar \term Heap h;
      \schemaVar \term any v;      
      \schemaVar \term blockchain.types.Uint256 arg1, arg2;
      \schemaVar \term java.lang.Object o;
      \schemaVar \term Field f;
      
      \find ( blockchain.types.Uint256::sum(store(h, o, f, v), arg1, arg2) )
	  \replacewith( \if (o != arg1 & o != arg2) \then (blockchain.types.Uint256::sum(h, arg1, arg2)) \else (blockchain.types.Uint256::sum(store(h, o, f, v), arg1, arg2)) )
      \heuristics (userTaclets1)
  };

 eqDiff {
      \schemaVar \term Heap h;
      \schemaVar \term blockchain.types.Uint256 arg1, arg2;

      \assumes ( wellFormed(h) ==> )
      \find ( ==> blockchain.types.Uint256::eq(h, arg1, arg2) = TRUE )
      \add( ==> arg1 = arg2 )
      \heuristics (userTaclets1)
  };

 eqSame {
      \schemaVar \term Heap h;
      \schemaVar \term blockchain.types.Uint256 arg1;

      \assumes ( wellFormed(h) ==> )
      \find ( blockchain.types.Uint256::eq(h, arg1, arg1) )
      \sameUpdateLevel
      \replacewith( TRUE )
      \heuristics (userTaclets1)
  };

 eqSameDef {
      \schemaVar \term Heap h;
      \schemaVar \term blockchain.types.Uint256 arg1,arg2;

      \assumes ( wellFormed(h) ==> )
      \find ( blockchain.types.Uint256::eq(h, arg1, arg2) )
      \sameUpdateLevel
      \replacewith( \if ( int::select(h, arg1, blockchain.types.Uint256::$_value) = int::select(h, arg2, blockchain.types.Uint256::$_value) ) \then (TRUE) \else (FALSE) )
      \heuristics (userTaclets3)
  };


 subSame {
      \schemaVar \term Heap h;
      \schemaVar \term blockchain.types.Uint256 arg1;

      \assumes ( wellFormed(h) ==> )
      \find ( blockchain.types.Uint256::sub(h, arg1, arg1) )
      \sameUpdateLevel
      \replacewith( blockchain.types.Uint256::select(h, null, blockchain.types.Uint256::$ZERO) )
      \heuristics (userTaclets1)
  };

  subEq {
      \schemaVar \term Heap h;
      \schemaVar \term blockchain.types.Uint256 arg1, arg2;

      \assumes ( wellFormed(h), blockchain.types.Uint256::eq(h, arg1, arg2) = TRUE  ==> )
      \find ( blockchain.types.Uint256::sub(h, arg1, arg2) )
      \sameUpdateLevel
      \replacewith( blockchain.types.Uint256::select(h, null, blockchain.types.Uint256::$ZERO) )
      \heuristics (userTaclets1)
  };

    dismissUnrelatedStateChangeSub {
      \schemaVar \term Heap h;
      \schemaVar \term any v;      
      \schemaVar \term blockchain.types.Uint256 arg1, arg2;
      \schemaVar \term java.lang.Object o;
      \schemaVar \term Field f;
      
      \find ( blockchain.types.Uint256::sub(store(h, o, f, v), arg1, arg2) )
	  \replacewith( \if (o != arg1 & o != arg2) \then (blockchain.types.Uint256::sub(h, arg1, arg2)) \else (blockchain.types.Uint256::sub(store(h, o, f, v), arg1, arg2)) )
       \heuristics (userTaclets1)
  };

  dismissUnrelatedStateChangeEq {
      \schemaVar \term Heap h, EQ;
      \schemaVar \term any v;
      \schemaVar \term blockchain.types.Uint256 arg1, arg2;
      \schemaVar \term java.lang.Object o;
      \schemaVar \term Field f;
      
      \assumes ( EQ = store(h, o, f, v) ==> )
      \find ( blockchain.types.Uint256::eq(EQ, arg1, arg2) )
      \sameUpdateLevel
	  \replacewith( \if (o != arg1 & o != arg2) \then (blockchain.types.Uint256::eq(h, arg1, arg2)) \else (blockchain.types.Uint256::eq(store(h, o, f, v), arg1, arg2)) )
      \heuristics (userTaclets1)
  };
  
   dismissUnrelatedStateChangeSumEq {
      \schemaVar \term Heap h, EQ;
      \schemaVar \term any v;
      \schemaVar \term blockchain.types.Uint256 arg1, arg2;
      \schemaVar \term java.lang.Object o;
      \schemaVar \term Field f;
      
      \assumes ( EQ = store(h, o, f, v) ==> )
      \find ( blockchain.types.Uint256::sum(EQ, arg1, arg2) )
      \sameUpdateLevel
	  \replacewith( \if (o != arg1 & o != arg2) \then (blockchain.types.Uint256::sum(h, arg1, arg2)) \else (blockchain.types.Uint256::sum(store(h, o, f, v), arg1, arg2)) )
      \heuristics (userTaclets1)
  };
  
   dismissUnrelatedStateChangeSubEq {
      \schemaVar \term Heap h, EQ;
      \schemaVar \term any v;
      \schemaVar \term blockchain.types.Uint256 arg1, arg2;
      \schemaVar \term java.lang.Object o;
      \schemaVar \term Field f;
      
      \assumes ( EQ = store(h, o, f, v) ==> )
      \find ( blockchain.types.Uint256::sub(EQ, arg1, arg2) )
      \sameUpdateLevel
	  \replacewith( \if (o != arg1 & o != arg2) \then (blockchain.types.Uint256::sub(h, arg1, arg2)) \else (blockchain.types.Uint256::sub(store(h, o, f, v), arg1, arg2)) )
      \heuristics (userTaclets1)
  };

  insert_MAX_UINT256 {
    \find (MAXUINT256) 
    \replacewith (115792089237316195423570985008687907853269984665640564039457584007913129639935)
    \heuristics(simplify)
  };


  simplifyStoreAnonStore {
      \schemaVar \term Heap h1,h2;
      \schemaVar \term any v1,v2;
      \schemaVar \term java.lang.Object o;
      \schemaVar \term Field f;
      \schemaVar \term LocSet ls;
      
      \find(store(anon(store(h1,o,f,v1),ls,h2),o,f,v2) )
      \replacewith(store(anon(h1,ls,h2),o,f,v2))
      \heuristics(userTaclets2)
   };
   
 /* headTailUnique {
    \find (casino.contract.Coin.TAILS = casino.contract.Coin.HEAD)
    \replacewith(false)
    \heuristics(concrete)
  };

  idleGameAvailableUnique {
     \find(casino.contract.State.IDLE = casino.contract.State.GAME_AVAILABLE)
    \replacewith(false)
    \heuristics(concrete)
  
  };
  
   idleBetPlacedUnique {
     \find(casino.contract.State.IDLE = casino.contract.State.BET_PLACED)
    \replacewith(false)
    \heuristics(concrete)
  
  };
  
   gameAvailableBetPlacedUnique {
     \find(casino.contract.State.GAME_AVAILABLE = casino.contract.State.BET_PLACED)
    \replacewith(false)
    \heuristics(concrete)
  
  };
  */

}
